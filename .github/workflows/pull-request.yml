name: Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  terraform-fmt-validate:
    name: Format and validate terraform configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.4"
      - name: Terraform fmt
        run: terraform fmt -check -recursive
      - name: Terraform Init
        run: terraform init -backend=false
      - name: Terraform Validate
        run: terraform validate

  terraform-tflint:
    name: Lint terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache tflint plugin directory
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
      - name: Initialise tflint
        run: tflint --init
      - name: Run TFLint
        run: tflint --minimum-failure-severity=error

  python-lint:
    name: Lint python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./function
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Check code formatting
        run: poetry run black --check .
      - name: Check dependency formatting
        run: poetry run isort --check-only --profile black .
      - name: Check dependency formatting
        run: poetry run mypy --check-untyped-defs --disable-error-code=import-untyped .

  python-test:
    name: Test python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./function
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Install plugin
        run: poetry add pytest-github-actions-annotate-failures
      - name: Pytest
        run: poetry run pytest

  # Ensure the lambda function is successfully built using the terraform module
  package-build:
    name: Build lambda package
    runs-on: ubuntu-latest
    env:
      TF_VAR_create: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
      - name: Install build dependencies
        run: |
          pip install poetry
      - name: Install test dependencies
        run: |
          pip install 'moto[all,server]'
      - name: Start moto proxy 
        run: |
          moto_server -H 0.0.0.0 -p 5000 > moto_proxy.log &
      - name: Setup provider
        run: |
          cp .github/workflows/assets/test-provider.tf provider.tf
      - name: Initalise terraform
        run: |
          terraform init
      - name: Build package
        run: |
          terraform apply -auto-approve
      - name: Stop proxy
        run: |
          kill $(lsof -t -i:5000)

  terraform-docs:
    name: Validate terraform documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Check terraform docs are up to date
        uses: terraform-docs/gh-actions@v1.2.0
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          fail-on-diff: true

  security:
    name: Scan repository files for security misconfigurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: ./github/workflows/assets/trivy.yaml